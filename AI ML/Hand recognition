import cv2
import mediapipe as mp

class HandDetector():
    def __init__(self):
        self.hand_detector = mp.solutions.hands.Hands()
        self.drawer = mp.solutions.drawing_utils

    def process(self, img, draw=True):
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        self.hands_data = self.hand_detector.process(img_rgb)
        if draw:
            if self.hands_data.multi_hand_landmarks:
                for handlms in self.hands_data.multi_hand_landmarks:
                    self.drawer.draw_landmarks(img, handlms, mp.solutions.hands.HAND_CONNECTIONS)
        return img

    def find_position(self, img):
        h, w, c = img.shape
        position = {'Left': {}, 'Right': {}}
        if self.hands_data.multi_hand_landmarks:
            for i, handlms in enumerate(self.hands_data.multi_hand_landmarks):
                hand_landmarks = self.hands_data.multi_hand_landmarks[i]
                for id, lm in enumerate(hand_landmarks.landmark):
                    x, y = int(lm.x * w), int(lm.y * h)
                    position['Left' if i == 0 else 'Right'][id] = (x, y)
        return position

face_detector = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

hand_detector = HandDetector()

camera = cv2.VideoCapture(0)  # Change the index if needed

while True:
    success, img = camera.read()
    if success:
        img = cv2.flip(img, 1)
        
        # Detect faces
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_detector.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        for (x, y, w, h) in faces:
            cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)

        # Detect hands
        img_with_hands = hand_detector.process(img, draw=True)
        position = hand_detector.find_position(img)
        for hand, fingers in position.items():
            for finger_id, finger_pos in fingers.items():
                cv2.circle(img_with_hands, finger_pos, 8, (0, 255, 0), cv2.FILLED)

        cv2.imshow('Video', img_with_hands)
    k = cv2.waitKey(1)
    if k == ord('q'):
        break

camera.release()
cv2.destroyAllWindows()
